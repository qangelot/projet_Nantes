# Using Tox (works on multiple OS) has major benefits:
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing


[tox] # runs everything
envlist = test_package, typechecks, stylechecks, lint
skipsdist = True

[testenv] # a bit like parent class in OOP
install_command = pip install {opts} {packages}

[testenv:test_package] # a bit like child class
deps =
	-rrequirements/test_requirements.txt

# set some env variables
setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0

# what cmds to run (train model + tests)
commands=
	python attendance_model/train_pipeline.py
	pytest \
	-s \
	-vv \
	{posargs:tests/}

[testenv:train] # simpler cmd, only runing train pipeline
envdir = {toxworkdir}/test_package
deps =
	{[testenv:test_package]deps}

setenv =
	{[testenv:test_package]setenv}

commands=
	python attendance_model/train_pipeline.py


[testenv:typechecks]
envdir = {toxworkdir}/test_package

deps =
	{[testenv:test_package]deps}

commands = {posargs:mypy regression_model}


[testenv:stylechecks]
envdir = {toxworkdir}/test_package

deps =
	{[testenv:test_package]deps}

commands = {posargs:flake8 attendance_model tests}


[testenv:lint]
envdir = {toxworkdir}/test_package

deps =
	{[testenv:test_package]deps}

commands =
	isort attendance_model tests
	black attendance_model tests
	mypy attendance_model
	flake8 attendance_model

[flake8]
exclude = .git,env
max-line-length = 90